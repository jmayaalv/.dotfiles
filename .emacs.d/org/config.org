* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists-

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))
   #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
   (maybe-install-and-require 'use-package)
   #+END_SRC
* Globals
** Disable siganture checking of packages. Use only on rare occasions;
    #+BEGIN_SRC emacs-lisp
      ;;(setq package-check-signature nil)
    #+END_SRC
** start as server
    #+BEGIN_SRC emacs-lisp
    (server-start)
    #+END_SRC
** Memory
    #+BEGIN_SRC emacs-lisp
    ;;Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do:
    (setq gc-cons-threshold 100000000)

    ;;Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    #+END_SRC
** Preserve scroll screen position
    #+BEGIN_SRC emacs-lisp
    (setq scroll-preserve-screen-position t)
    #+END_SRC
** Disable toolbar
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  #+END_SRC
** Messing with elisp GC
 #+BEGIN_SRC emacs-lisp
   (defun my-minibuffer-setup-hook ()
     (setq gc-cons-threshold most-positive-fixnum))

   (defun my-minibuffer-exit-hook ()
     (setq gc-cons-threshold 800000))

   (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
   (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
 #+END_SRC
** No need for ~ files when editing
    #+BEGIN_SRC emacs-lisp
    (setq create-lockfiles nil)
    #+END_SRC
** Answering just 'y' or 'n' will do
    #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
** UTF-8 Please
   #+BEGIN_SRC emacs-lisp
   (setq locale-coding-system 'utf-8) ; pretty
   (set-terminal-coding-system 'utf-8) ; pretty
   (set-keyboard-coding-system 'utf-8) ; pretty
   (set-selection-coding-system 'utf-8) ; please
   (prefer-coding-system 'utf-8) ; with sugar on top
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** Delete Selection Mode
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode t)
   #+END_SRC

** Hippie Expand


   HippieExpand looks at the word before point and tries to expand it
   in various ways including expanding from a fixed list, expanding
   from matching text found in a buffer or expanding in ways defind by
   your own functions.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-RET") 'hippie-expand)
   #+END_SRC

** diminish


   Stops minor modes from making a mess of the modeline.

   #+BEGIN_SRC emacs-lisp
     (use-package diminish :ensure t)
   #+END_SRC

** No Tabs

   Let's not used tabs for identation.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Uniquify

   When several buffers visit identically-named files, Emacs must give
   the buffers distinct names. There are several different styles for
   constructing such names. Post-forward puts the dricetory names in
   forward order after the file name.

   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'post-forward)
   #+END_SRC

** Multiple Cursors

   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
        :ensure t
        :bind
        (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . 'mc/mark-all-like-this)))
   #+END_SRC

** Discover

   Allows to discover more of Emacs using context menus.

   #+BEGIN_SRC emacs-lisp
     (use-package discover
       :ensure t
       :config (global-discover-mode 1))
   #+END_SRC

** Disable beep

   Disable the beep sound when trying to move the cursor beyond the
   beginning or end of a document.

    #+BEGIN_SRC emacs-lisp
      (defun my-bell-function ()
        (unless (memq this-command
          '(isearch-abort abort-recursive-edit exit-minibuffer
                keyboard-quit mwheel-scroll down up next-line previous-line
                backward-char forward-char))
              (ding)))
       (setq ring-bell-function 'my-bell-function)
    #+END_SRC

** Better moving between windows

   Rebind the default C-x o to M-o as it's such a common binding to
   use.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-o") 'other-window)
   #+END_SRC
** Save Emacs sessions

   #+BEGIN_SRC emacs-lisp
     (desktop-save-mode 1)
   #+END_SRC

** Auto-save in the visited file
   #+BEGIN_SRC emacs-lisp
   (setq auto-save-visited-file-name t)
   #+END_SRC

** Delete trailing whitespace

   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook
             (lambda nil
              (delete-trailing-whitespace)))
   #+END_SRC

** Mouse mode in iTerm 2
    #+BEGIN_SRC emacs-lisp
   (unless window-system
     (require 'mouse)
     (xterm-mouse-mode t)
     (global-set-key [mouse-4] '(lambda ()
                                (interactive)
                                (scroll-down 1)))
     (global-set-key [mouse-5] '(lambda ()
                                (interactive)
                                (scroll-up 1)))
     (defun track-mouse (e))
     (setq mouse-sel-mode t))
    #+END_SRC

** Pragma block

    #+BEGIN_SRC emacs-lisp
     (defun insert-pragma-block ()
       (interactive)
       (insert ";;-------------------------------------------------------------------------------
     ;; ## Pragma-block-name"))

     (global-set-key (kbd "<f5> p") 'insert-pragma-block)
    #+END_SRC

** Don't split windows automatically
   #+BEGIN_SRC emacs-lisp
   (setq split-height-threshold nil
         split-width-threshold nil)
   #+END_SRC
** Keep aell backup and auto-save files in one directory
      #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
      (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
      #+END_SRC
** Which key
      #+BEGIN_SRC emacs-lisp
        (use-package which-key
          :ensure t
          :config (progn (which-key-mode)
                         (diminish 'which-key-mode)))
      #+END_SRC
** Cursor

      #+BEGIN_SRC emacs-lisp
      (blink-cursor-mode 0)
      (setq default-cursor-type 'bar)
      (setq scroll-preserve-screen-position 'always)
      #+END_SRC
** Try packages without installing them

   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

** Emacs's GPG keyring for GNU ELPA

   #+BEGIN_SRC emacs-lisp
     (use-package gnu-elpa-keyring-update
       :ensure t)
   #+END_SRC

** Global Keybindings
   #+BEGIN_SRC emacs-lisp
     ; Align your code in a pretty way.
     (global-set-key (kbd "C-x \\") 'align-regexp)


     ;; Font size
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd "C--") 'text-scale-decrease)

     ;; Indentation help
     (global-set-key (kbd "C-^") 'crux-top-join-line)

     ; Start eshell or switch to it if it's active.
     (global-set-key (kbd "C-x m") 'eshell)

     ;; Start a new eshell even if one is active.
     (global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))

     ;; A quick major mode help with discover-my-major
     (define-key 'help-command (kbd "C-f") 'find-function)
     (define-key 'help-command (kbd "C-k") 'find-function-on-key)
     (define-key 'help-command (kbd "C-v") 'find-variable)
     (define-key 'help-command (kbd "C-l") 'find-library)
     (define-key 'help-command (kbd "C-i") 'info-display-manual)


     ;; Activate occur easily inside isearch
     (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
   #+END_SRC
* Non-elpa

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (concat user-emacs-directory "non-elpa/"))
   #+END_SRC

* OSX Specific Setup
** window-number-super mode

   On a mac we have M-3 mapped to be the

   #+BEGIN_SRC emacs-lisp
    ;; (require 'window-number-super)
    ;; (window-number-mode 1) ;; for the window numbers
    ;; (window-number-super-mode 1) ;; for the super key binding
   #+END_SRC

** $PATH is broken

   If you don't run emacs in a terminal on Mac OS X then it can be
   really awkward to get the stuff you want in your path. This is the
   best way I've found so far to sort this out and get things like
   ~/bin and /usr/loca/bin in a $PATH that emacs can access. I quite
   like running emacs from outside the terminal.

   Thanks to the lovely and helpful [[https://twitter.com/_tobrien][Tom O'Brien]] I've got a better way
   of doing this and now my emacs environment will be in sync with my
   shell. You can out more at the github page for
   [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]].

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :config
     (when (memq window-system '(mac ns))
     (exec-path-from-shell-initialize)))

   #+END_SRC

** delete files by moving them to the trash
   #+BEGIN_SRC emacs-lisp
   (setq delete-by-moving-to-trash t)
   (setq trash-directory "~/.Trash")
   #+END_SRC
**  set keys for Apple keyboard, for emacs in OS X
   #+BEGIN_SRC emacs-lisp
   (setq mac-option-modifier 'super)
   (setq mac-command-modifier 'meta)
   (setq ns-function-modifier 'hyper)
   #+END_SRC
** Nice scrolling

   #+BEGIN_SRC emacs-lisp
   (setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)
   #+END_SRC
* Pretty Emacs is pretty
** Frame titles
   #+BEGIN_SRC emacs-lisp
   (setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
   #+END_SRC
** Color themes

*** custom-theme-directory

    Themes seem to be quite picky about where they live. They require
    custom-theme-directory to be set. By default this is the same as
    user-emacs-directory, which is usually ~/.emacs.d. I'd like to
    keep them separate if possible. I learned this one by reading
    some of [[https://github.com/sw1nn/dotfiles][Neale Swinnerton's dotfiles]].

    #+BEGIN_SRC emacs-lisp
      (setq custom-theme-directory (concat user-emacs-directory "themes"))
    #+END_SRC

*** all the icons
#+BEGIN_SRC emacs-lisp
      (use-package all-the-icons
        :ensure t
        :init
        (progn (defun -custom-modeline-github-vc ()
                 (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
                   (concat
                    (propertize (format " %s" (all-the-icons-octicon "git-branch"))
                                'face `(:height 1 :family ,(all-the-icons-octicon-family))
                                'display '(raise 0))
                    (propertize (format " %s" branch))
                    (propertize "  "))))

               (defvar mode-line-my-vc
                 '(:propertize
                   (:eval (when vc-mode
                            (cond
                             ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
                             (t (format "%s" vc-mode)))))
                    )
                 "Formats the current directory.")))
    #+END_SRC
*** theme
    #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
         :ensure t
         :config
         (load-theme 'zenburn t))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp

      ;; (use-package doom-themes
      ;; :ensure t
      ;; :config
      ;; ;; Global settings (defaults)
      ;; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      ;; doom-themes-enable-italic t) ; if nil, italics is universally disabled
      ;; ;;(load-theme 'doom-one-light t)
      ;; (load-theme 'doom-one t)

      ;; ;; Enable flashing mode-line on errors
      ;; (doom-themes-visual-bell-config)

      ;; ;; Enable custom neotree theme (all-the-icons must be installed!)
      ;; ;; (doom-themes-neotree-config)
      ;; ;; or for treemacs users
      ;; ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      ;; ;; (doom-themes-treemacs-config)

      ;; ;; Corrects (and improves) org-mode's native fontification.
      ;;  (doom-themes-org-config))
    #+END_SRC
** fonts

   Fira code without ligatures is hacky but worthy

   #+BEGIN_SRC emacs-lisp
   ;;   (when (memq window-system '(mac ns)) (set-default-font
   ;;   "-apple-Menlo-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1"))
   #+END_SRC

   Or if you are cool enough you can try fira-code

    #+BEGIN_SRC emacs-lisp
      (when (window-system)
       (set-frame-font "Fira Code"))
      (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               ;; (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)"))))
             (dolist (char-regexp alist)
               (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))

      (add-hook 'cider-repl-mode-hook
          (lambda ()
            (setq auto-composition-mode nil)))

      (add-hook 'org-mode-hook
          (lambda ()
            (setq auto-composition-mode nil)))

   #+END_SRC

   #+END_SRC

** bars, menus and numbers


   I like no scroll bars, no toolbars.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (column-number-mode 1)
   #+END_SRC

** Line numbers

   Display the linenumbers in programming modes and other modes

   #+begin_src emacs-lisp
     (defun custom-display-line-numbers ()
          (setq  display-line-numbers 'absolute
          display-line-numbers-current-absolute t
          display-line-numbers-width 4
          display-line-numbers-widen t)
          (set-face-attribute 'line-number-current-line nil
                              :background "#696969" :foreground "black"))

     (add-hook 'prog-mode-hook (lambda ()
                   (custom-display-line-numbers)))
   #+end_src

** Startup Screen

   I'd also like to skip the startup screen and go straight to
   the *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

** Transparency

   Make the background transparent

   #+BEGIN_SRC emacs-lisp
     (defun toggle-transparency ()
       (interactive)
       (let ((param (cadr (frame-parameter nil 'alpha))))
         (if (and param (/= param 100))
             (set-frame-parameter nil 'alpha '(100 100))
           (set-frame-parameter nil 'alpha '(85 50)))))
     (global-set-key (kbd "C-c C-t") 'toggle-transparency)
   #+END_SRC

** Nyan mode
   Because it looks nice!
   #+BEGIN_SRC emacs-lisp
      (use-package nyan-mode
        :ensure t)
   #+END_SRC
** Modeline
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init
       (doom-modeline-mode 1)
       :config

       (setq  all-the-icons-color-icons nil
              inhibit-compacting-font-caches t
              find-file-visit-truename t
               doom-modeline-vcs-max-length 20

              ))


     ;; (defun d/flycheck-lighter (state)
     ;;   "Return flycheck information for the given error type STATE. Source: https://git.io/vQKzv"
     ;;   (let* ((counts (flycheck-count-errors flycheck-current-errors))
     ;;          (errorp (flycheck-has-current-errors-p state))
     ;;          (err (or (cdr (assq state counts)) "?"))
     ;;          (running (eq 'running flycheck-last-status-change)))
     ;;     (if (or errorp running) (format "•%s" err))))

     ;; (setq-default mode-line-format
     ;;               (list
     ;;                mode-line-modified

     ;;                mode-line-front-space

     ;;                mode-line-my-vc

     ;;                '(:eval (propertize " %b "
     ;;                                    'face
     ;;                                    (let ((face (buffer-modified-p)))
     ;;                                      (if face 'font-lock-warning-face
     ;;                                        'font-lock-type-face))
     ;;                                    'help-echo (buffer-file-name)))

     ;;                mode-line-position

     ;;                mode-line-front-space
     ;;                ;; flycheck
     ;;                '(:eval
     ;;                  (when (and (bound-and-true-p flycheck-mode)
     ;;                             (or flycheck-current-errors
     ;;                                 (eq 'running flycheck-last-status-change)))
     ;;                    (concat
     ;;                     (cl-loop for state in '((error . "#FB4933")
     ;;                                             (warning . "#FABD2F")
     ;;                                             (info . "#83A598"))
     ;;                              as lighter = (d/flycheck-lighter (car state))
     ;;                              when lighter
     ;;                              concat (propertize
     ;;                                      lighter
     ;;                                      'face `(:foreground ,(cdr state))))
     ;;                     " ")))

     ;;                ;; which function
     ;;                '(:eval (let ((fn (which-function)))
     ;;                          (when fn
     ;;                            (format "[%s] " fn))))

     ;;                ;; spaces to align right
     ;;                '(:eval (propertize
     ;;                         " " 'display
     ;;                         `((space :align-to (- (+ right right-fringe right-margin)
     ;;                                               ,(+ 3 (string-width mode-name)))))))

     ;;                ;; the current major mode
     ;;                (propertize " %m " 'face 'font-lock-string-face)))

     ;; (set-face-attribute 'mode-line nil
     ;;                     :background "#353644"
     ;;                     :foreground "white"
     ;;                     :box '(:line-width 8 :color "#353644")
     ;;                     :overline nil
     ;;                     :underline nil)

     ;; (set-face-attribute 'mode-line-inactive nil
     ;;                     :background "#565063"
     ;;                     :foreground "white"
     ;;                     :box '(:line-width 8 :color "#565063")
     ;;                     :overline nil
     ;;                     :underline nil)
   #+end_src
** Dimmer
  subtle visual indication which window is currently active by dimming the faces on the others.
 #+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :ensure t
    :config
    (setq dimmer-percent 0.4)
    (dimmer-activate))
 #+END_SRC
** Beacon

  A light that follows your cursor around so you don't lose it!

  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      (setq beacon-blink-duration 0.5)
      (setq beacon-blink-delay 0.5)
      (add-to-list 'beacon-dont-blink-major-modes '('term-mode 'ediff-mode 'ediff)))
  #+END_SRC
** Persistent Overlasy

   an Emacs mode that allows you to store overlays between sessions. This is useful for storing overlays with the invisible property in hideshow and outline modes.

     #+BEGIN_SRC emacs-lisp
       (use-package persistent-overlays
         :ensure t
         :config
         (add-hook 'prog-mode-hook (lambda () (hs-minor-mode 1) (setq hs-allow-nesting t) (persistent-overlays-minor-mode 1)))
         (setq persistent-overlays-auto-save t)
         (setq persistent-overlays-auto-load t)
         (setq persistent-overlays-auto-merge t))
  #+END_SRC
** Spinner

      Add spinners and progress-bars to the mode-line for ongoing operations.

     #+BEGIN_SRC emacs-lisp
     (use-package spinner
       :ensure t)
     #+END_SRC
* directories, navigation, searching, movement
** Async

** Guru mode
   Guru mode disables (or warns on) some generic keybindings and suggests the use of the established and more efficient Emacs alternatives instead.
   #+BEGIN_SRC emacs-lisp
   (use-package guru-mode
    :ensure t
    :config
     (setq guru-warn-only t)
     (guru-mode +1)
     (diminish 'guru-mode))
   #+END_SRC

** Easy kill
   Kill & Mark Things Easily
  #+BEGIN_SRC emacs-lisp
     ;;(use-package easy-kill
     ;;     :ensure f ;;disable for the time being. Need to learn how to use it as is affecint my wf
     ;;     :config
     ;;     (global-set-key [remap kill-ring-save] 'easy-kill)
     ;;     (global-set-key [remap mark-sexp] 'easy-mark))
   #+END_SRC
** key chord

   #+BEGIN_SRC emacs-lisp
     (use-package key-chord
          :ensure t
          :config (key-chord-mode 1))
   #+END_SRC
** Crux
   #+BEGIN_SRC emacs-lisp
     (use-package crux
       :ensure t
       :after key-chord
       :config
       (key-chord-define-global "JJ" 'crux-switch-to-previous-buffer)
       (global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
       (global-set-key (kbd "C-c o") #'crux-open-with)
       (global-set-key (kbd "C-c a") #'crux-move-beginning-of-line)
       (global-set-key (kbd "C-^") #'crux-top-join-line)
       (global-set-key (kbd "C-c n") #'crux-cleanup-buffer-or-region)
       (global-set-key (kbd "C-c f") #'crux-recentf-find-file)
       (global-set-key (kbd "C-M-z") #'crux-indent-defun)
       (global-set-key (kbd "C-c u") #'crux-view-url)
       (global-set-key (kbd "C-c e") #'crux-eval-and-replace)
       (global-set-key (kbd "C-c s") #'crux-swap-windows)
       (global-set-key (kbd "C-c D") #'crux-delete-file-and-buffer)
       (global-set-key (kbd "C-c d") #'crux-duplicate-current-line-or-region)
       (global-set-key (kbd "C-c M-d") #'crux-duplicate-and-comment-current-line-or-region)
       (global-set-key (kbd "C-c r") #'crux-rename-buffer-and-file)
       (global-set-key (kbd "C-c t") #'crux-visit-term-buffer)
       (global-set-key (kbd "C-c k") #'crux-kill-other-buffers)
       (global-set-key (kbd "C-c TAB") #'crux-indent-rigidly-and-copy-to-clipboard)
       (global-set-key (kbd "C-c I") #'crux-find-user-init-file)
       (global-set-key (kbd "C-c S") #'crux-find-shell-init-file)
       (global-set-key (kbd "s-<return>") #'crux-smart-open-line)
       (global-set-key (kbd "M-o") #'crux-smart-open-line)
       (global-set-key [(shift return)] #'crux-smart-open-line)
       (global-set-key [(control shift return)] #'crux-smart-open-line-above)
       (global-set-key (kbd "s-r") #'crux-recentf-find-file)
       (global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
       (global-set-key [remap kill-whole-line] #'crux-kill-whole-line))
   #+END_SRC

** undo tree
   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
       :ensure t
       :config
       (global-undo-tree-mode)
       (diminish 'undo-tree-mode))
   #+END_SRC
** recentf
  #+BEGIN_SRC emacs-lisp


    (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
      (message "Aborting")))

    (use-package recentf
      :ensure t
      :bind
      (("C-x C-r" . ido-recentf-open))
      :init
      (recentf-mode t)
      (setq recentf-max-saved-items 200))

   #+END_SRC

** dired

   dired can do lots of things. I'm pretty basic in my use. I do like
   to have the file listings use human friendly numbers though.

   #+BEGIN_SRC emacs-lisp
   (when (string= system-type "darwin")
     (setq dired-use-ls-dired nil))
   (setq dired-listing-switches "-alh")
   #+END_SRC
** Selectrum
    #+BEGIN_SRC emacs-lisp
      (use-package selectrum
         :ensure t
         :init
         (selectrum-mode +1))


        (use-package selectrum-prescient
          :ensure t
          :requires selectrum
          :init
          (selectrum-prescient-mode 1)
          (prescient-persist-mode 1)
          (global-set-key [remap execute-extended-command] 'execute-extended-command))

        (use-package marginalia
          :ensure t
          :bind (:map minibuffer-local-map
                      ("C-M-a" . marginalia-cycle)
                 ;; When using the Embark package, you can bind `marginalia-cycle' as an Embark action!
                 ;;:map embark-general-map
                 ;;     ("A" . marginalia-cycle)
                )

          ;; The :init configuration is always executed (Not lazy!)
          :init

          ;; Must be in the :init section of use-package such that the mode gets
          ;; enabled right away. Note that this forces loading the package.
          (marginalia-mode)

          ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
          (advice-add #'marginalia-cycle :after
                      (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))

          ;; Prefer richer, more heavy, annotations over the lighter default variant.
          ;; E.g. M-x will show the documentation string additional to the keybinding.
          ;; By default only the keybinding is shown as annotation.
          ;; Note that there is the command `marginalia-cycle' to
          ;; switch between the annotators.
          (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
        ;; (use-package marginalia
        ;;   :ensure t
        ;;   :init
        ;;   (marginalia-mode)
        ;;   ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
        ;;   (advice-add #'marginalia-cycle :after
        ;;   (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))

        (use-package embark
          :ensure t
          :bind
          ("C-c C-o" . embark-export)
          ("C-c C-c" . embark-act-noexit)
          ("C-S-a" . embark-act)               ; pick some comfortable binding
          :config
          ;; For Selectrum users:
          (defun current-candidate+category ()
            (when selectrum-active-p
              (cons (selectrum--get-meta 'category)
                    (selectrum-get-current-candidate))))

          (add-hook 'embark-target-finders #'current-candidate+category)

          (defun current-candidates+category ()
            (when selectrum-active-p
              (cons (selectrum--get-meta 'category)
                    (selectrum-get-current-candidates
                     ;; Pass relative file names for dired.
                     minibuffer-completing-file-name))))

          (add-hook 'embark-candidate-collectors #'current-candidates+category)

          ;; No unnecessary computation delay after injection.
          (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate))

        ;; Example configuration for Consult
        (use-package consult
          :ensure t
          :after projectile
          ;; Replace bindings. Lazily loaded due by `use-package'.
          :bind (
          ;;("C-x M-:" . consult-complex-command)
          ;;("C-c h" . consult-history)
                 ;;("C-c m" . consult-mode-command)
                 ("C-c k" . consult-keep-lines)
                 ("C-c C-k" . consult-hide-lines)
                 ("C-x b" . consult-buffer)
                 ("C-x 4 b" . consult-buffer-other-window)
                 ("C-x 5 b" . consult-buffer-other-frame)
                 ("C-x r x" . consult-register)
                 ("C-x r b" . consult-bookmark)
                 ("M-g g" . consult-goto-line)
                 ("M-g M-g" . consult-goto-line)
                 ("M-g o" . consult-outline)       ;; "M-s o" is a good alternative.
                 ("M-g l" . consult-line)          ;; "M-s l" is a good alternative.
                 ("C-s" . consult-line)
                 ("M-g m" . consult-mark)          ;; I recommend to bind Consult navigation
                 ("M-g k" . consult-global-mark)   ;; commands under the "M-g" prefix.
                 ("M-g r" . consult-git-grep)      ;; or consult-grep, consult-ripgrep
                 ("M-g f" . consult-find)          ;; or consult-locate, my-fdfind
                 ("M-g i" . consult-project-imenu) ;; or consult-imenu
                 ("M-g e" . consult-error)
                 ("M-s m" . consult-multi-occur)
                 ("M-y" . consult-yank-pop)
                 ("<help> a" . consult-apropos))

          ;; The :init configuration is always executed (Not lazy!)
          :init

          (setq-default consult-project-root-function 'projectile-project-root)

          ;; Custom command wrappers. It is generally encouraged to write your own
          ;; commands based on the Consult commands. Some commands have arguments which
          ;; allow tweaking. Furthermore global configuration variables can be set
          ;; locally in a let-binding.
          (defun my-fdfind (&optional dir)
            (interactive "P")
            (let ((consult-find-command '("fdfind" "--color=never" "--full-path")))
              (consult-find dir)))

          ;; Replace `multi-occur' with `consult-multi-occur', which is a drop-in replacement.
          (fset 'multi-occur #'consult-multi-occur)

          ;; Configure register preview function.
          ;; This gives a consistent display for both `consult-register' and
          ;; the register preview when editing registers.
          (setq register-preview-delay 0
                register-preview-function #'consult-register-preview)

          ;; Configure other variables and modes in the :config section, after lazily loading the package
          :config

          ;; Configure preview. Note that the preview-key can also be configured on a
          ;; per-command basis via `consult-config'.
          ;; The default value is 'any, such that any key triggers the preview.
          ;; (setq consult-preview-key 'any)
          ;; (setq consult-preview-key (kbd "M-p"))
          ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))

          ;; Optionally configure narrowing key.
          ;; Both < and C-+ work reasonably well.
          (setq consult-narrow-key "<") ;; (kbd "C-+")
          ;; Optionally make narrowing help available in the minibuffer.
          ;; Probably not needed if you are using which-key.
          ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

          ;; Optional configure a view library to be used by `consult-buffer'.
          ;; The view library must provide two functions, one to open the view by name,
          ;; and one function which must return a list of views as strings.
          ;; Example: https://github.com/minad/bookmark-view/
          ;; (setq consult-view-open-function #'bookmark-jump
          ;;       consult-view-list-function #'bookmark-view-names)

          ;; Optionally configure a function which returns the project root directory
          (autoload 'projectile-project-root "projectile")
          (setq consult-project-root-function #'projectile-project-root))

        ;; Optionally add the `consult-flycheck' command.
        (use-package consult-flycheck
          :ensure t
          :bind (:map flycheck-command-map
                      ("!" . consult-flycheck)))


          ;; Consult users will also want the embark-consult package.
          (use-package embark-consult
          :ensure t
          :after (embark consult)
          ;; if you want to have consult previews as you move around an
          ;; auto-updating embark collect buffer
          :hook
          (embark-collect-mode . embark-consult-preview-minor-mode))
   #+END_SRC

** Counsel
   #+BEGIN_SRC emacs-lisp
      (use-package counsel
       :ensure t
       :bind (("C-x C-f" . counsel-find-file))
;;       :init (counsel-mode 1)
)
   #+END_SRC
** Ivy
      #+BEGIN_SRC emacs-lisp
        ;; (use-package ivy
        ;;              :ensure t
        ;;              :init
        ;;              (progn
        ;;                (ivy-mode 1)
        ;;                (setq ivy-use-virtual-buffers t)
        ;;                (setq enable-recursive-minibuffers t)
        ;;                (global-set-key (kbd "C-c C-r") 'ivy-resume)
        ;;                (global-set-key (kbd "<f6>") 'ivy-resume)
        ;;                ;; swiper provides enhanced buffer search
        ;;                ;; counsel supercharges a lot of commands with some ivy magic
        ;;                (global-set-key (kbd "M-x") 'counsel-M-x)
        ;;                (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        ;;                (global-set-key (kbd "<f1> f") 'counsel-describe-function)
        ;;                (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
        ;;                (global-set-key (kbd "<f1> l") 'counsel-find-library)
        ;;                (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
        ;;                (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
        ;;                (global-set-key (kbd "C-c g") 'counsel-git)
        ;;                (global-set-key (kbd "C-c j") 'counsel-git-grep)
        ;;                (global-set-key (kbd "C-c C-a") 'counsel-ag)
        ;;                (global-set-key (kbd "C-x l") 'counsel-locate)
        ;;                (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))

        ;;           (use-package ivy-prescient
        ;;            :ensure t
        ;;            :after ivy
        ;;            :config
        ;;            (ivy-prescient-mode 1))

        ;;          (use-package ivy-posframe
        ;;             :ensure t
        ;;             :requires counsel
        ;;             :after ivy
        ;;             :diminish
        ;;            :init
        ;;             (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))
        ;;                   ivy-posframe-height-alist '((t . 20))
        ;;                   ivy-posframe-parameters '((internal-border-width . 10)))
        ;;             (setq ivy-posframe-width 150)
        ;;             (ivy-posframe-mode 1))


        ;;           (use-package ivy-rich
        ;;             :ensure t
        ;;             :after (ivy counsel)
        ;;             :config
        ;;             (ivy-rich-mode 1)
        ;;             (diminish ivy-rich-mode))
      #+END_SRC
** git

*** magit

    magit is a *fantastic* mode for dealing with git.

    #+BEGIN_SRC emacs-lisp
      (use-package magit
      :ensure t
      :bind
       ("C-x g" . magit-status))
    #+END_SRC

*** git-gutter-mode+

    It is really nice having +/= in the gutter.

    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter-fringe+
       :ensure t
       :bind
       (("s-n" . git-gutter+-next-hunk)
        ("s-p" . git-gutter+-previous-hunk))
       :init
       (global-git-gutter+-mode t)
       (diminish 'git-gutter+-mode))
    #+END_SRC

*** diff-hl

    Highlights uncommitted changes on the left side of the window, allows you to jump between and revert them selectively.

    #+BEGIN_SRC emacs-lisp
      (use-package diff-hl
       :ensure t
       :hook ((dired-mode-hook . diff-hl-dired-mode)
              (magit-post-refresh-hook  . 'diff-hl-magit-post-refresh))
       :init
       (global-diff-hl-mode +1))
    #+END_SRC
*** git-time-machine

    Step through historic versions of git controlled file

    #+BEGIN_SRC emacs-lisp
      (use-package git-timemachine
       :ensure t)
    #+END_SRC

** swiper
    #+BEGIN_SRC emacs-lisp
      ;;(use-package swiper
        ;;   :ensure t
        ;;   :bind
        ;;   (("C-s" . swiper)
        ;;    ("C-r" . swiper))
           ;; :config
           ;; (progn
           ;;   (setq enable-recursive-minibuffers t)))
   #+END_SRC
** avy-mode

   Move quickly anywhere in the buffer in 3 keystrokes. We can move
   there with C-c j and back to where we started with C-c k.

   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :after key-chord
       :bind (("C-c j" . avy-goto-word-or-subword-1)
              ("C-," . avy-goto-word-or-subword-1))
       :config
       (key-chord-define-global "jj" 'avy-goto-word-1)
       (key-chord-define-global "jl" 'avy-goto-line)
       (key-chord-define-global "jk" 'avy-goto-char)
       (key-chord-define-global "xx" 'execute-extended-command))
   #+END_SRC

** Ace-window

  nice to jump between windows

  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn (global-set-key [remap other-window] 'ace-window)
             (custom-set-faces
              '(aw-leading-char-face
                ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
  #+END_SRC

** window and buffer tweaking
*** window movement

    Use Shift+arrow_keys to move cursor around split panes

    #+BEGIN_SRC emacs-lisp
      (windmove-default-keybindings)
    #+END_SRC

*** buffer movement

    Sometimes the problem isn't that you want to move the cursor to a
    particular window, but you want to move a buffer. buffer-move lets
    you do that.

    #+BEGIN_SRC emacs-lisp
      (use-package buffer-move
        :ensure t
        :bind (("<s-up>" . buf-move-up)
               ("<s-down>" . buf-move-down)
               ("<s-left>" . buf-move-left)
               ("<s-right>" . buf-move-right)))
    #+END_SRC

*** shrink and enlarge windows

    On large screens where there are lots of windows in a frame we'll
    often want to shrink or grow individual windows. It would be handy
    to have easier keys for this.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-=") 'shrink-window)
      (global-set-key (kbd "s-+") 'enlarge-window)
    #+END_SRC

** backup directories

   I'm fed up of having to put *~ into my .gitignore everywhere and
   I shouldn't really leave emacs only things in there anyway. Let's
   just move all the backup files to one directory.

   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
   #+END_SRC

** ibuffer

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     (setq ibuffer-saved-filter-groups
           (quote (("default"
                    ("dired" (mode . dired-mode))
                    ("org" (name . "^.*org$"))
                    ("web" (or (mode . web-mode)
                               (mode . js2-mode)))
                    ("shell" (or (mode . eshell-mode)
                                 (mode . shell-mode)))
                    ("programming" (or (mode . clojure-mode)
                                       (name . "^.*clj$")
                                       (name . "^.*cljs$")))
                    ("sql" (or (mode . sql-mode)
                                            (name . "^.*sql$")))
                    ("emacs" (or (name . "^\\*scratch\\*$")
                                 (name . "^\\*Messages\\*$")))))))

     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))

     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)
   #+END_SRC

** projectile

   [[https://github.com/bbatsov/projectile][projectile]] from [[http://twtitter.com/bbatsov][Bozhidar Batsov]] constrains and helps things like
   searches so that they happen within a git repo or leiningen
   project.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :init
       (projectile-global-mode)
       :bind
       ("s-p" . projectile-command-map)
       ("s-f" . projectile-find-file)
       ("s-e" . projectile-recentf)
       ("s-s" . projectile-grep))

     ;; (use-package counsel-projectile
     ;;   :ensure t
     ;;   :requires (projectile counsel)
     ;;   :init
     ;;   (counsel-projectile-mode)
     ;;   (diminish 'projectile-mode)
     ;;   (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     ;;   (global-set-key (kbd "s-f") 'counsel-projectile)
     ;;   (global-set-key (kbd "s-E") 'projectile-recentf)
     ;;   (global-set-key (kbd "s-s") 'projectile-grep))
   #+END_SRC

** Autosave

 #+BEGIN_SRC emacs-lisp
   (use-package super-save
     :ensure t
     :config (progn (super-save-mode +1)
                    (setq auto-save-default nil)
                    (diminish 'super-save-mode)))
   #+END_SRC
** hl mode
   Highlights the current line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
   #+END_SRC

** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC
** iEdit,narrow & widen
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)

     ; if you're windened, narrow to the region, if you're narrowed, widen
     ; bound to C-x n
     (defun narrow-or-widen-dwim (p)
     "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
     Intelligently means: region, org-src-block, org-subtree, or defun,
     whichever applies first.
     Narrowing to org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer is already
     narrowed."
     (interactive "P")
     (declare (interactive-only))
     (cond ((and (buffer-narrowed-p) (not p)) (widen))
     ((region-active-p)
     (narrow-to-region (region-beginning) (region-end)))
     ((derived-mode-p 'org-mode)
     ;; `org-edit-src-code' is not a real narrowing command.
     ;; Remove this first conditional if you don't want it.
     (cond ((ignore-errors (org-edit-src-code))
     (delete-other-windows))
     ((org-at-block-p)
     (org-narrow-to-block))
     (t (org-narrow-to-subtree))))
     (t (narrow-to-defun))))

     ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
     ;; This line actually replaces Emacs' entire narrowing keymap, that's
     ;; how much I like this command. Only copy it if that's what you want.
     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)


   #+END_SRC

** Ag
   Text search
   #+BEGIN_SRC emacs-lisp
     (use-package ag :ensure t)
   #+END_SRC
** Anzu
   enhances isearch & query-replace by showing total matches and current match position
   #+BEGIN_SRC emacs-lisp
     (use-package anzu
       :ensure t
       :bind
       (("C-%" . anzu-query-replace)
        ("C-M-%" . anzu-query-replace-regexp))
       :config
       (diminish 'anzu-mode)
       (global-anzu-mode))
   #+END_SRC
** clean up obsolete buffers automatically
   #+BEGIN_SRC emacs-lisp
   (use-package midnight :ensure t)
   #+END_SRC
** discover my major
   Discover key bindings and descriptions for commands defined by a buffer's major and minor modes.
   #+begin_src emacs-lisp
     (use-package discover-my-major
       :ensure t
       :bind
       (("C-h M-m" . discover-my-major)
        ("C-h M-M" . discover-my-mode)))
   #+end_src
** custom functions
*** Move lines
    #+begin_src emacs-lisp
      (defun move-line-up ()
        "Move up the current line."
        (interactive)
        (transpose-lines 1)
        (forward-line -2)
        (indent-according-to-mode))

      (defun move-line-down ()
        "Move down the current line."
        (interactive)
        (forward-line 1)
        (transpose-lines 1)
        (forward-line -1)
        (indent-according-to-mode))

      (global-set-key [(control shift up)]  'move-line-up)
      (global-set-key [(control shift down)]  'move-line-down)
    #+end_srcrma
* Programming Modes
** prog-mode
*** Whitespace
   Visual ques for whitespace
   #+BEGIN_SRC emacs-lisp
   (whitespace-mode +1)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC
*** Code Annotations
    #+BEGIN_SRC emacs-lisp
    (use-package hl-todo
     :ensure t)
     #+END_SRC
*** company
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :config (progn (global-company-mode)
                       (setq company-idle-delay 0.5)
                       (setq company-show-numbers t)
                       (setq company-tooltip-limit 10)
                       (setq company-minimum-prefix-length 2)
                       (setq company-tooltip-align-annotations t)
                       ;; invert the navigation direction if the the completion popup-isearch-match
                       ;; is displayed on top (happens near the bottom of windows)
                       (setq company-tooltip-flip-when-above t)
                       (global-company-mode 1)
                       (diminish 'company-mode)))

      (use-package company-quickhelp
       :ensure t
       :bind (("C-c h" . company-quickhelp-manual-begin))
       :config
       (setq company-quickhelp-delay nil))
     #+END_SRC
*** Parentheses
**** Show Parens

     #+BEGIN_SRC emacs-lisp
     (show-paren-mode +1)
     #+END_SRC

**** paredit-mode

     #+BEGIN_SRC emacs-lisp
       (use-package paredit
         :ensure t
         :bind
         (("M-[" . paredit-wrap-square)
          ("M-{" . paredit-wrap-curly))
         :config
         (diminish 'paredit-mode "()")
         (add-hook 'prog-mode-hook 'paredit-mode))
     #+END_SRC

*** rainbow-delimiters

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :ensure t
        :config
        (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

    #+END_SRC

*** rainbow mode

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-mode
        :ensure t
        :config
        (add-hook 'prog-mode-hook 'rainbow-mode)
        (diminish 'rainbow-mode))
    #+END_SRC

*** highlight-symbol

    #+BEGIN_SRC emacs-lisp
      (use-package highlight-symbol
        :ensure t
        :config (progn (add-hook 'prog-mode-hook 'highlight-symbol-mode)
                       (diminish 'highlight-symbol-mode)))

    #+END_SRC

*** yasnippet
    Template system for Emacs. It allows you to type an abbreviation
    and automatically expand it into function templates.

    #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
        :ensure t
        :config
         (setq yas-snippet-dirs      '("~/.emacs.d/snippets"))
         (yas-global-mode 1)
         (diminish 'yas-minor-mode))
    #+END_SRC
*** smartscan

    A suggestion from [[http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/][Effective Editing]] in [[http://www.masteringemacs.org/][Mastering Emacs]].

    #+BEGIN_SRC emacs-lisp
    (use-package smartscan
        :ensure t
        :config
        (add-hook 'prog-mode-hook
                  '(lambda () (smartscan-mode 1))))

    #+END_SRC

** lisp modes
*** lisp hooks

    #+BEGIN_SRC emacs-lisp
      (setq lisp-hooks (lambda ()
                         ;(eldoc-mode +1)
                                (diminish 'eldoc-mode)
                                (define-key paredit-mode-map
                                  (kbd "{") 'paredit-open-curly)
                                (define-key paredit-mode-map
                                  (kbd "}") 'paredit-close-curly)))
    #+END_SRC

*** emacs-lisp

**** lisp-mode-hook

     #+BEGIN_SRC emacs-lisp
       (add-hook 'emacs-lisp-mode-hook lisp-hooks)
     #+END_SRC
*** clojure
**** cider

      #+BEGIN_SRC emacs-lisp
               ;; load CIDER from its source code
        ;;       (add-to-list 'load-path "~/Documents/workspace/cider")
        ;;       (require 'cider)


        (use-package cider
          :ensure t
          :pin melpa-stable
          :bind
          (("C-c M-o" . cider-repl-clear-buffer)
           ("C-c M-s" . cider-selector)
           ("<tab>" . company-indent-or-complete-common))
          :config
          (setq cider-eldoc-display-for-symbol-at-point nil) ;; disable cider showing eldoc during symbol at point
          (setq cider-clojure-cli-global-options "-A:dev")
          ;;(setq cider-clojure-cli-global-options "-J-Dguardrails.enabled -A:dev") ;set dv as default alias in cli
          (add-hook 'clojure-mode-hook lisp-hooks)

          ;(setq cider-lein-global-options "-o") ;sets lein to offine
          ;(setq cider-clojure-cli-global-options "-o")

          ;;history
          (setq cider-history-file (concat user-emacs-directory "cider-history"))
          (setq cider-repl-wrap-history t)
          (setq cider-repl-history-file "~/.cider-repl-history")
          (setq clojure-align-forms-automatically t)
          ;  (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))") ;i dont' think this is needed anymore with fighweel.main
           (setq-default ediff-ignore-similar-regions t)
           ;; used when calling ediff-show-diff-output from ediff session
           ;; (bound to D). Not interactive.
           (setq ediff-custom-diff-options "--suppress-common-lines")

           ;Prevent C-c C-k from prompting to save the file corresponding to the buffer being loaded, if it's modified:
           (setq cider-save-file-on-load nil)
           (setq cider-save-file-on-load t)

           ;;Fuzzy Completion
           (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
           (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)


           ;;Enable paredit or smartparens for minibuffer evaluations
           (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)

           ;;Enable paredit in the repl
           (add-hook 'cider-repl-mode-hook 'paredit-mode)

           ;;Interactive commands will try the command with the symbol at point first, and only prompt if that fails
           (setq cider-prompt-for-symbol nil)

           ;;Dont log communication with nrepl server
           (setq nrepl-log-messages nil)

            ;;hide the *nrepl-connection* and *nrepl-server* buffers from appearing
            (setq nrepl-hide-special-buffers t)

            ;;Highlight symbols that are known to be defined.
            (setq cider-font-lock-dynamically '(macro core function var))

            ;;Remove banner
            (setq cider-repl-display-help-banner nil)

             ;;support for guardrails
            (put '>defn 'clojure-doc-string-elt 2))
      #+END_SRC

***** cider-test-report diff hook
     #+BEGIN_SRC emacs-lisp
      (defun cider-ediff-hack ()
       (interactive)
       (let ((expected (get-text-property (point) 'actual))
        (tmp-buffer (generate-new-buffer " *tmp*"))
        (expected-buffer (generate-new-buffer " *expected*"))
        (actual-buffer   (generate-new-buffer " *actual*")))
       (with-current-buffer tmp-buffer
        (insert expected)
        (goto-char (point-min))
        (re-search-forward "= ")
        (let ((opoint (point)))
          (forward-sexp 1)
          (let* ((tpoint (point))
                 (our-exp (buffer-substring-no-properties opoint (point)))
                 (_ (forward-sexp 1))
                 (our-act (buffer-substring-no-properties tpoint (point) )))
            (with-current-buffer expected-buffer
              (insert our-exp)
              (delete-trailing-whitespace))
            (with-current-buffer actual-buffer
              (insert our-act)
              (delete-trailing-whitespace))
            (apply 'ediff-buffers
                   (setq cider-test-ediff-buffers
                         (list (buffer-name expected-buffer)
                               (buffer-name actual-buffer)))))))))
     #+END_SRC

**** Portal
      #+BEGIN_SRC emacs-lisp


        (defun portal.api/open ()
          (interactive)
          (cider-nrepl-sync-request:eval
           "(require 'portal.api) (portal.api/tap) (portal.api/open)"))

        (defun portal.api/clear ()
          (interactive)
          (cider-nrepl-sync-request:eval "(portal.api/clear)"))

        (defun portal.api/close ()
          (interactive)
          (cider-nrepl-sync-request:eval "(portal.api/close)"))


      #+END_SRC
**** clojure refactor
     #+BEGIN_SRC emacs-lisp
       (defun my-clojure-mode-hook ()
         (clj-refactor-mode 1)
         (yas-minor-mode 1) ; for adding require/use/import statements
         ;; This choice of keybinding leaves cider-macroexpand-1 unbound
         (cljr-add-keybindings-with-prefix "C-c r"))

        (use-package clj-refactor
         :pin melpa-stable
         :ensure t
           :config
          (setq cljr-warn-on-eval nil)
          (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
          (diminish 'clj-refactor-mode))
     #+END_SRC
**** align let forms

     Pretty alignment of let, when-let, if-let, binding, loop,
     with-open, literal hashes {}, defroute, cond, and condp
     (except :>> subforms).

     #+BEGIN_SRC emacs-lisp
       (use-package align-cljlet
         :ensure t)
     #+END_SRC

**** sw1nn-cider-perspective or Engineering

     #+BEGIN_SRC emacs-lisp
       (defun sw1nn-nrepl-current-server-buffer ()
         (let ((nrepl-server-buf (replace-regexp-in-string "connection" "server" (nrepl-current-connection-buffer))))
           (when nrepl-server-buf
             (get-buffer nrepl-server-buf))))

       (defun sw1nn-cider-perspective ()
         (interactive)
         (delete-other-windows)
         (split-window-below)
         (windmove-down)
         (shrink-window 25)
         (switch-to-buffer (sw1nn-nrepl-current-server-buffer))
         (windmove-up)
         (pop-to-buffer (cider-find-or-create-repl-buffer)))
     #+END_SRC

**** inf-clojure
     #+BEGIN_SRC emacs-lisp
     (use-package inf-clojure
       :ensure t
       :config
       (add-hook 'inf-clojure-mode 'paredit-mode))

     #+END_SRC
**** flycheck
     #+BEGIN_SRC emacs-lisp
     (use-package flycheck
         :ensure t
         :config
         (global-flycheck-mode)
         (diminish 'flycheck-mode))
     #+END_SRC

**** Convert html to hiccup


   #+BEGIN_SRC emacs-lisp
     (use-package html-to-hiccup
       :ensure t
       :config
         (define-key clojure-mode-map (kbd "H-h") 'html-to-hiccup-convert-region))
   #+END_SRC

** lsp
*** Clojure
      #+begin_src emacs-lisp
                (defun find-definition ()
                        "Try to find definition of cursor via LSP otherwise fallback to cider."
                        (interactive)
                        (let ((cursor (point))
                              (buffer (current-buffer)))
                          (lsp-find-definition)
                          (when (and (eq buffer (current-buffer))
                                     (eq cursor (point)))
                            (cider-find-var))))


                (use-package lsp-mode
                  :commands lsp
                  :ensure t
                  :hook ((clojure-mode . lsp)
                         (clojurec-mode . lsp)
                         (clojurescript-mode . lsp)
                         (java-mode . lsp))
                  :init

                 (define-key clojure-mode-map (kbd "M-.") #'find-definition)
                 (define-key cider-mode-map (kbd "M-.") #'find-definition)
                 (define-key clojurec-mode-map (kbd "M-.") #'find-definition)
                 (define-key clojurescript-mode-map (kbd "M-.") #'find-definition)

                  :config
                  ;;add paths to your local installation of project mgmt tools, like lein
                  (setenv "PATH" (concat
                                  "/usr/local/bin" path-separator
                                  (getenv "PATH")))


                  (dolist (m '(clojure-mode
                               clojurec-mode
                               clojurescript-mode
                               clojurex-mode))
                    (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))

                  (set-face-foreground 'lsp-face-highlight-textual nil)
                  (set-face-background 'lsp-face-highlight-textual nil)
                  (set-face-attribute 'lsp-face-highlight-textual nil :weight 'extra-bold)
                  (set-face-attribute 'lsp-face-highlight-textual nil :underline t)

                  (setq gc-cons-threshold (* 100 1024 1024)
                        lsp-keymap-prefix "s-l"
                        read-process-output-max (* 1024 1024)
                        lsp-file-watch-threshold 10000
                        ;;lsp-idle-delay 0.5
                        lsp-modeline-diagnostics-enable t
                        company-idle-delay 0.5
                        company-minimum-prefix-length 1
                        treemacs-space-between-root-nodes nil
                        lsp-lens-enable t
                        lsp-semantic-tokens-enable nil
                        lsp-signature-auto-activate t
                        lsp-signature-render-documentation t
                        lsp-clojure-server-command '("bash" "-c" "clojure-lsp")
                        lsp-enable-indentation nil
                        lsp-headerline-breadcrumb-enable nil
                        lsp-completion-provider :capf
                        lsp-enable-symbol-highlighting t
                        ;; lsp-enable-completion-at-point nil ;; uncomment to use cider completion instead of lsp
                        ;;lsp-diagnostics-provider :none
                        lsp-eldoc-enable-hover t
                        lsp-log-io nil
                        cljr-add-ns-to-blank-clj-files nil ;; disable clj-refactor adding ns to blank files
                        cljr-magic-requires nil ;; temp disable to avoid problem with trade component
                        lsp-enable-which-key-integration  t))

        (use-package lsp-java
          :ensure t
          :after lsp
          :config
          (setq lsp-java-references-code-lens-enabled t
                lsp-java-implementations-code-lens-enabled t
                lsp-file-watch-ignored-directories
                '(".idea" ".ensime_cache" ".eunit" "node_modules"
                  ".git" ".hg" ".fslckout" "_FOSSIL_"
                  ".bzr" "_darcs" ".tox" ".svn" ".stack-work"
                  "build")))
        (use-package lsp-treemacs
          :ensure t
          :requires lsp-mode)

        (use-package consult-lsp
          :ensure t
          :requires lsp-mode)
      #+end_src

** javascript

   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
       (add-to-list 'interpreter-mode-alist '("node" . js2-mode)))
   #+END_SRC

** pastebins

   gist, pastebin, refheap. All good ways of sharing snippets of code
   with people on irc or similar.

*** gist

    As you probably already have a github account, having gist as a
    way of sharing code snippets is a good idea.

    #+BEGIN_SRC emacs-lisp
      (use-package gist :ensure t)
    #+END_SRC

** sql
*** Add sql-mode to .sql files

    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.sql\\'" . sql-mode))
    #+end_src
*** db list
    This is the list of db connections
    #+BEGIN_SRC emacs-lisp
      (setq sql-connection-alist
            '((localhost.dev
               (sql-name "localhost.dev")
               (sql-default-directory nil)
               (sql-postgres-program "psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsdev")
               (sql-database "imsdb_dev"))

              (localhost.test
               (sql-name "localhost.test")
               (sql-postgres-program "psql")
               (sql-default-directory nil)
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imstest")
               (sql-database "imsdb_test"))

              (nav.prod
               (sql-name "oic.prod")
               (sql-default-directory "/ssh:devel.jmayaalv@navdb:")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsnavprod")
               (sql-database "imsnavproddb"))

              (oic.prod
               (sql-name "oic.prod")
               (sql-default-directory "/ssh:devel.jmayaalv@oicdb:")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsoicprod")
               (sql-database "imsoicproddb"))

              (omi.prod
               (sql-name "omi.prod")
               (sql-default-directory "/ssh:devel.jmayaalv@omidb:")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsomiprod")
               (sql-database "imsomiproddb"))

               (omnia.test
               (sql-name "omnia.test")
               (sql-default-directory "/ssh:devel.jmayaalv@omniatest:")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsombps")
               (sql-database "imsombpsdb"))

              (oic.test2
               (sql-name "oic.test2")
               (sql-default-directory "/ssh:devel.jmayaalv@oictest2:")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsoictest2")
               (sql-database "imsoictest2db"))

              (oic.test3
               (sql-name "oic.test3")
               (sql-default-directory "/ssh:devel.jmayaalv@oictest3:")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsoictest3")
               (sql-database "imsoictest3db"))

              (veritas.test
               (sql-name "veritas.test")
               (sql-postgres-program "/usr/local/postgresql-12.2/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@veritastest:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsveritastest1")
               (sql-database "imsveritastest1db"))

              (veritas.prod
               (sql-name "veritas.prod")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@veritasprod:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsveritasprod")
               (sql-database "imsveritasproddb"))

              (omi.test1
               (sql-name "omi.test1")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@omitest:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsomitest1")
               (sql-database "imsomitest1db"))

             (omi.test2
               (sql-name "omi.test2")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@omitest2:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsomitest2")
               (sql-database "imsomitest2db"))

            (omi.test4
               (sql-name "omi.test4")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@omitest4:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsomitest4")
               (sql-database "imsomitest4db"))

              (northstar.prod
               (sql-name "northstar.prod")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@nsdb:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsbcgprod")
               (sql-database "imsbcgproddb"))


             (northstar.test
               (sql-name "northstar.test")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@nstest1:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsnfstest1db")
               (sql-database "imsnfstest1"))

              (sanlam.prod
               (sql-name "sanlam.prod")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@sanlamdb:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imssanlamprod")
               (sql-database "imssanlamproddb"))

             (sanlam.test
               (sql-name "sanlam.test")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@sanlamtest1:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imssgist1")
               (sql-database "imssgist1db"))

             (glacier.test
               (sql-name "glacier.test1")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@glaciertest1:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsglaciertest1")
               (sql-database "imsglaciertest1db"))

             (glacier.test2
               (sql-name "glacier.test2")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@glaciertest2:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsglaciertest2")
               (sql-database "imsglaciertest2db"))

              (glacier.prod
               (sql-name "glacier.prod")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@glacierdb:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsglacierprod")
               (sql-database "imsglacierproddb"))

              (omnia.prod
               (sql-name "omnia.prod")
               (sql-postgres-program "/usr/local/postgresql-12.2/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@omniadb:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsombprod")
               (sql-database "imsombproddb"))

              (agl.prod
               (sql-name "agl.prod")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@agldb:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsdartaprod")
               (sql-database "imsdartaproddb"))

              (argus.prod
               (sql-name "argus.prod")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@argusprod:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsargusprod")
               (sql-database "imsargusproddb"))

             (argus.test2
               (sql-name "argus.test2")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@argustest2:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsargust2")
               (sql-database "imsargust2db"))

              (providence.prod
               (sql-name "providence.prod")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@providenceprod:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsprovidenceprod")
               (sql-database "imsprovidenceproddb"))

             (allangray.test1
               (sql-name "allangray.test1")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@allangraytest1:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsagrayt1")
               (sql-database "imsagrayt1db"))

             (providence.test
               (sql-name "providence.test")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-default-directory "/ssh:devel.jmayaalv@providencetest:")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsprovidencetest")
               (sql-database "imsprovidencetestdb"))

             (nextgen.test
               (sql-name "nextgen.test")
               (sql-default-directory "/ssh:devel.jmayaalv@nextgentest1:")
               (sql-postgres-program "/usr/local/pgsql/bin/psql")
               (sql-product 'postgres)
               (sql-port 5432)
               (sql-server "localhost")
               (sql-user "imsngt1")
               (sql-database "imsngt1db"))))
    #+End_SRC

    And this  makes all it all happen via M-x sql-xxx where xxx is the name of the pool in the prev list ex: sql-localhost.mbp

    #+BEGIN_SRC emacs-lisp
      (defun sql-localhost.dev ()
        "Create a new sql connection to the local dev db."
        (interactive)
        (my-sql-connect  'postgres 'localhost.dev))

       (defun sql-allangray.test1 ()
        "Create a new sql connection to allan gray test1 db."
        (interactive)
        (my-sql-connect  'postgres 'allangray-test1))

      (defun sql-nav.prod ()
        "Create a new sql connection to nav  db."
        (interactive)
        (my-sql-connect  'postgres 'nav.prod))

      (defun sql-localhost.test ()
        "Create a new sql connection to the local test db."
        (interactive)
        (my-sql-connect  'postgres 'localhost.test))

      (defun sql-nextgen.test ()
        "Create a new sql connection to the next gen test db"
        (interactive)
        (my-sql-connect  'postgres 'nextgen.test))

      (defun sql-oic.prod ()
        "Create a new sql connection to the oic prod db."
         (interactive)
         (my-sql-connect 'postgres 'oic.prod))

      (defun sql-omnia.prod ()
        "Create a new sql connection to the omnia prod db."
        (interactive)
        (my-sql-connect 'postgres 'omnia.prod))

      (defun sql-agl.prod ()
        "Create a new sql connection to the agl prod db."
        (interactive)
        (my-sql-connect 'postgres 'agl.prod))

      (defun sql-omi.prod ()
        "Create a new sql connection to the omi prod db."
        (interactive)
        (my-sql-connect 'postgres 'omi.prod))

      (defun sql-oic.test2 ()
        "Create a new sql connection to the oic test2 db."
         (interactive)
         (my-sql-connect 'postgres 'oic.test2))

      (defun sql-oic.test3 ()
        "Create a new sql connection to the oic test3 db."
         (interactive)
         (my-sql-connect 'postgres 'oic.test3))

      (defun sql-glacier.prod ()
        "Create a new sql connection to the glacier prod db."
        (interactive)
        (my-sql-connect 'postgres 'glacier.prod))

      (defun sql-argus.prod ()
        "Create a new sql connection to the argus prod db."
         (interactive)
         (my-sql-connect 'postgres 'argus.prod))

      (defun sql-argus.test2 ()
        "Create a new sql connection to the argus prod db."
         (interactive)
         (my-sql-connect 'postgres 'argus.test2))

      (defun sql-providence.prod ()
        "Create a new sql connection to the providence prod db."
         (interactive)
         (my-sql-connect 'postgres 'providence.prod))

      (defun sql-providence.test ()
        "Create a new sql connection to the providence test db."
         (interactive)
         (my-sql-connect 'postgres 'providence.test))

      (defun sql-glacier.test ()
        "Create a new sql connection to the glacier test db."
         (interactive)
         (my-sql-connect 'postgres 'glacier.test))

      (defun sql-glacier.test2 ()
        "Create a new sql connection to the glacier test2 db."
         (interactive)
         (my-sql-connect 'postgres 'glacier.test2))

      (defun sql-veritas.test ()
        "Create a new sql connection to the veritas test db."
         (interactive)
         (my-sql-connect 'postgres 'veritas.test))

      (defun sql-veritas.prod ()
        "Create a new sql connection to the veritas prod db."
         (interactive)
         (my-sql-connect 'postgres 'veritas.prod))

      (defun sql-sanlam.prod ()
        "Create a new sql connection to the sanlam prod db."
         (interactive)
         (my-sql-connect 'postgres 'sanlam.prod))

     (defun sql-sanlam.test ()
        "Create a new sql connection to the sanlam test 1 db."
         (interactive)
         (my-sql-connect 'postgres 'sanlam.test))

      (defun sql-northstar.prod ()
        "Create a new sql connection to the sanlam prod db."
         (interactive)
         (my-sql-connect 'postgres 'northstar.prod))

      (defun sql-northstar.test ()
        "Create a new sql connection to the northstar test db."
         (interactive)
         (my-sql-connect 'postgres 'northstar.test))

      (defun sql-omi.test1 ()
        "Create a new sql connection to the omi test1 db."
         (interactive)
         (my-sql-connect 'postgres 'omi.test1))

      (defun sql-omi.test2 ()
        "Create a new sql connection to the omi test2 db."
         (interactive)
         (my-sql-connect 'postgres 'omi.test2))

      (defun sql-omi.test4 ()
        "Create a new sql connection to the omi test4 db."
         (interactive)
         (my-sql-connect 'postgres 'omi.test4))

      (defun sql-omnia.test ()
        "Create a new sql connection to the omnia test db."
         (interactive)
         (my-sql-connect 'postgres 'omnia.test))

      (defun my-sql-connect (product connection)
        "Create a new sql CONNECTION with a given PRODUCT."
         (setq sql-product product)
         (sql-connect connection))

       (defun sql-connect-preset (product name)
         "Connect to a predefined SQL connection listed in `sql-connection-alist'"
         (setq sql-product product)
         (eval `(let ,(cdr (assoc name sql-connection-alist))
                  (flet ((sql-get-login (&rest what)))
                    (sql-product-interactive sql-product)))))
    #+END_SRC

    And now we want the buffer to use the name of the pool *SQL: <host>_<db>, which is easier to  find when you M-x list-buffers, or C-x C-b

    #+BEGIN_SRC emacs-lisp
      (defun sql-make-smart-buffer-name ()
        "Return a string that can be used to rename a SQLi buffer.
        This is used to set `sql-alternate-buffer-name' within
        `sql-interactive-mode'."
        (or (and (boundp 'sql-name) sql-name)
            (concat (if (not(string= "" sql-server))
                        (concat
                         (or (and (string-match "[0-9.]+" sql-server) sql-server)
                             (car (split-string sql-server "\\.")))
                         "/"))
                    sql-database)))
    #+END_SRC

*** Hooks for sql mode: not truncate lines, better buffer name

    #+BEGIN_SRC emacs-lisp
      (add-hook 'sql-interactive-mode-hook
                (lambda ()
                  (toggle-truncate-lines t)
                  (setq sql-alternate-buffer-name (sql-make-smart-buffer-name))
                  (sql-rename-buffer)))
    #+END_SRC
*** Add a newline before the output
    #+BEGIN_SRC emacs-lisp
      (defun sql-add-newline-first (output)
         "Add newline to beginning of OUTPUT for `comint-preoutput-filter-functions'"
        (concat "\n" output))

      (defun sqli-add-hooks ()
        "Add hooks to `sql-interactive-mode-hook'."
        (add-hook 'comint-preoutput-filter-functions
                  'sql-add-newline-first))

      (add-hook 'sql-interactive-mode-hook 'sqli-add-hooks)
    #+END_SRC

* Text Modes
** Check spelling
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
      :ensure t
      :config
       (setq ispell-program-name "aspell") ; use aspell instead of ispell
       (flyspell-prog-mode)
;;       (add-hook 'text-mode-hook 'prelude-enable-flyspell)
       )
   #+END_SRC
** org-mode

   I also use org-mode on its own and would like to use it more. I
   used to be a complete planner-mode addict. I've never really
   gotten into org-mode in the same way. Having a way to sync to
   trello and link to my email, magit and everything else keeps
   making me want to try though.

    #+BEGIN_SRC emacs-lisp
      (setq org-replace-disputed-keys t)
      (setq org-use-fast-todo-selection t)
      (setq org-treat-S-cursor-todo-selection-as-state-change nil)

      (global-set-key (kbd "C-c l") 'org-store-link)
      (global-set-key (kbd "C-c A") 'org-agenda)
      (global-set-key (kbd "C-c b") 'org-switchb)
      (global-set-key (kbd "C-c c") 'org-capture)
      (global-set-key (kbd "C-c w") 'widen)
      (global-set-key (kbd "C-c n") 'calendar)

    #+END_SRC
*** Agenda
    #+begin_src emacs-lisp
      (setq org-agenda-files (quote ("~/org"
                                     "~/Developer/ms-edge/edge/doc"
                                     "~/Developer/ims-api/docs/org"
                                     "~/Developer/kane-labs/silnik/doc"
                                     "~/org/architecture")))

      ;; Do not dim blocked tasks
      (setq org-agenda-dim-blocked-tasks nil)

      ;; Compact the block agenda view
      (setq org-agenda-compact-blocks t)

      ;; Custom agenda command definitions
      (setq org-agenda-custom-commands
            (quote (("N" "Notes" tags "NOTE"
                     ((org-agenda-overriding-header "Notes")
                      (org-tags-match-list-sublevels t)))
                    (" " "Agenda"
                     ((agenda "" nil)
                      (tags "REFILE"
                            ((org-agenda-overriding-header "Tasks to Refile")
                             (org-tags-match-list-sublevels nil)))
                      (tags-todo "-CANCELLED/!"
                                 ((org-agenda-overriding-header "Stuck Projects")
                                  (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-HOLD-CANCELLED/!"
                                 ((org-agenda-overriding-header "Projects")
                                  (org-agenda-skip-function 'bh/skip-non-projects)
                                  (org-tags-match-list-sublevels 'indented)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-CANCELLED/!NEXT"
                                 ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                  (org-tags-match-list-sublevels t)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-sorting-strategy
                                   '(todo-state-down effort-up category-keep))))
                      (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                                 ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                                 ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-project-tasks)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-sorting-strategy
                                   '(category-keep))))
                      (tags-todo "-CANCELLED+WAITING|HOLD/!"
                                 ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                        (if bh/hide-scheduled-and-waiting-next-tasks
                                                                            ""
                                                                          " (including WAITING and SCHEDULED tasks)")))
                                  (org-agenda-skip-function 'bh/skip-non-tasks)
                                  (org-tags-match-list-sublevels nil)
                                  (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                  (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                      (tags "-REFILE/"
                            ((org-agenda-overriding-header "Tasks to Archive")
                             (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                             (org-tags-match-list-sublevels nil))))
                     nil))))
    #+end_src
*** Todo
    #+begin_src emacs-lisp
      (setq org-todo-keywords
            (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

      (setq org-todo-keyword-faces
            (quote (("TODO" :foreground "red" :weight bold)
                    ("NEXT" :foreground "blue" :weight bold)
                    ("DONE" :foreground "forest green" :weight bold)
                    ("WAITING" :foreground "orange" :weight bold)
                    ("HOLD" :foreground "magenta" :weight bold)
                    ("CANCELLED" :foreground "forest green" :weight bold)
                    ("MEETING" :foreground "forest green" :weight bold)
                    ("PHONE" :foreground "forest green" :weight bold))))


      (setq org-todo-state-tags-triggers
            (quote (("CANCELLED" ("CANCELLED" . t))
                    ("WAITING" ("WAITING" . t))
                    ("HOLD" ("WAITING") ("HOLD" . t))
                    (done ("WAITING") ("HOLD"))
                    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

    #+end_src
*** Capture
    #+begin_src emacs-lisp
      (setq org-directory "~/org")

      ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
      (setq org-capture-templates
            (quote (("t" "todo" entry (file "~/org/refile.org")
                     "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                    ("r" "respond" entry (file "~/org/refile.org")
                     "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                    ("n" "note" entry (file "~/org/refile.org")
                     "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                    ("w" "org-protocol" entry (file "~/org/refile.org")
                     "* TODO Review %c\n%U\n" :immediate-finish t)
                    ("m" "Meeting" entry (file "~/org/refile.org")
                     "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                    ("h" "Habit" entry (file "~/org/refile.org")
                     "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
    #+end_src

*** Refile

    #+begin_src emacs-lisp
      ;;Targets include this file and any file contributing to the agenda - up to 9 levels deep
      (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                       (org-agenda-files :maxlevel . 9))))

      ; Use full outline paths for refile targets
      (setq org-refile-use-outline-path t)

      ; Targets complete directly
      (setq org-outline-path-complete-in-steps nil)

      ; Allow refile to create parent tasks with confirmation
      (setq org-refile-allow-creating-parent-nodes (quote confirm))

      ; Use IDO for both buffer and file completion and ido-everywhere to t


      ; Use the current window for indirect buffer display
      (setq org-indirect-buffer-display 'current-window)


      ; Exclude DONE state tasks from refile targets
      (defun jm/verify-refile-target ()
        "Exclude todo keywords with a done state from refile targets"
        (not (member (nth 2 (org-heading-components)) org-done-keywords)))

      (setq org-refile-target-verify-function 'jm/verify-refile-target)


    #+end_src
*** fontify

    This is all written in org-mode. It would be good if the source
    code examples were fonitfies according to their major mode.

    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t)
    #+END_SRC

*** spelling

    On a Mac we need to tell org-mode to use aspell, which we
    installed using homebrew.

    #+BEGIN_SRC emacs-lisp
      (setq ispell-program-name (executable-find "aspell"))
    #+END_SRC

*** org-cheatsheet

    Having cheatsheets around is handy. Especially for sprawling
    modes like org-mode.

    #+BEGIN_SRC emacs-lisp
      ;; (use-package helm-orgcard
      ;;  :ensure t
      ;;  :config
      ;;  (add-hook 'org-mode-hook
      ;;   (lambda () (local-set-key [s-f1] 'helm-orgcard))))

    #+END_SRC

*** ox-reveal

    [[https://github.com/hakimel/reveal.js/][reveal.js]] is a great way of making pretty presentations,
    especially if you have a fair bit of code. Kris Jenkins suggested
    that [[https://github.com/yjwen/org-reveal][ox-reveal]] would be a great way of generating the slides for
    reveal.js.

    #+BEGIN_SRC emacs-lisp
      (use-package ox-reveal :ensure t)
    #+END_SRC

    As a part of the installation we need to point at where we have
    our copy of reveal.js. It uses a lot of disk space, but put it
    into a sub directory for each presentation. Then you can serve it
    up using http-server in node or a python webserver locally and
    then things like speaker notes will work.
    #+BEGIN_SRC emacs-lisp
      (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    #+END_SRC

*** org and magit


    Because sometimes you want to link to that particular commit.

    I added this functionality with this commit: [[magit:~/emacs-configs/otfrom-org-emacs/::commit@1dd7516][1dd7516]]

    #+BEGIN_SRC emacs-lisp
      (use-package orgit
        :ensure t)
    #+END_SRC
*** org bullets

    #+BEGIN_SRC emacs-lisp

      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** Org-Reveal
   Write[[http://lab.hakim.se/reveal-js/#/fragments][ Reveal.js]]
   #+BEGIN_SRC emacs-lisp
     ;; (use-package ox-reveal
     ;;   :ensure t
     ;;   :init (progn
     ;;           (setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js/3.0.0/")
     ;;           (setq org-reveal-mathjax t)))
   #+END_SRC
** html, sgml, xml

*** tagedit

    This gives us paredit like editing for html

    #+BEGIN_SRC emacs-lisp
      (use-package tagedit
       :ensure t
       :config
       (eval-after-load "sgml-mode"
        '(progn
           (require 'tagedit)
           (tagedit-add-paredit-like-keybindings)
           (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
       (tagedit-add-experimental-features))
    #+END_SRC

*** css

    I should probably look at adding more sugar to this.

**** paredit

     #+BEGIN_SRC emacs-lisp
       (add-hook 'css-mode-hook 'paredit-mode)
     #+END_SRC

**** rainbow mode

     #+BEGIN_SRC emacs-lisp
       (add-hook 'css-mode-hook 'rainbow-mode)
     #+END_SRC

**** eldoc

     #+BEGIN_SRC emacs-lisp
     (use-package css-eldoc :ensure t)
     #+END_SRC

**** helm support

     #+BEGIN_SRC emacs-lisp
       ;; (use-package helm-css-scss
       ;;  :ensure t
       ;;  :config
       ;;  (add-hook 'css-mode-hook
       ;;             (lambda () (local-set-key (kbd "s-h") 'helm-css-scss))))
     #+END_SRC

*** htmlize
    Exports the contents of an Emacs buffer to HTML. Very useful with reveal.js for code highligtingx

     #+BEGIN_SRC emacs-lisp
       (use-package htmlize
         :ensure t)
     #+END_SRC
** markdown

   #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
     :ensure t
     :commands (markdown-mode gfm-mode)
     :mode (("README\\.md\\'" . gfm-mode)
      ("\\.md\\'" . markdown-mode)
      ("\\.markdown\\'" . markdown-mode))
     :init (setq markdown-command "markdown"))
   #+END_SRC

*** Github Flavouring

    I pretty much *always* want to do [[http://github.github.com/github-flavored-markdown/][github flavoured markdown]], so
    let's just change that auto-mode-alist.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '(".md$" . gfm-mode))
    #+END_SRC

**** Github Flavoured Preview

     We also need to change the preview as the standard preview
     doesn't render github flavoured markdown correctly. I've
     installed markdown Preview+ as a Chrome Extension and associated
     .md files with Chrome on Mac OS X.

     This is all a bit broken really, but will work for now. I'm sorry
     that it is like this and I'm sure some day I'll fix it. This also
     means that you use markdown-open rather than markdown-preview.

     #+BEGIN_SRC emacs-lisp
       (setq markdown-open-command "open")
     #+END_SRC

** Json
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :ensure t)
   #+END_SRC
** YAML Mode
   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
       :ensure t
       :config
       (add-hook 'yaml-mode-hook 'whitespace-mode)
       (add-hook 'yaml-mode-hook 'subword-mode)
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
   #+END_SRC
** Plant uml

   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode)))
   #+END_SRC
** VLF
   #+BEGIN_SRC emacs-lisp
   (use-package vlf :ensure t)
   #+END_SRC
** Logs

   #+BEGIN_SRC emacs-lisp
     (use-package logview
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.log\\'" . logview-mode)))
   #+END_SRC
*** Remamp comment-dwin to comment line
    #+begin_src emacs-lisp
    (global-set-key [remap comment-dwim] #'comment-line)
    (global-set-key [remap paredit-comment-dwim] #'comment-line)
    #+end_src
* Integrations
** Terminal
    #+begin_src emacs-lisp
      (defvar my-prezto-files '("zlogin" "zlogin" "zlogout" "zpreztorc" "zprofile" "zshenv" "zshrc"))

      ;; (mapc (lambda (file)
      ;;     (add-to-list 'auto-mode-alist `(,(format "\\%s\\'" file) . sh-mode)))
      ;;   my-prezto-files)

      ;;   (add-hook 'sh-mode-hook
      ;;   (lambda ()
      ;;   (if (and buffer-file-name
      ;;   (member (file-name-nondirectory buffer-file-name) my-prezto-files))
      ;;   (sh-set-shell "zsh"))))



      (defmacro with-face (STR &rest PROPS)
        "Return STR propertized with PROPS."
        `(propertize ,STR 'face (list ,@PROPS)))

      (defmacro esh-section (NAME ICON FORM &rest PROPS)
        "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
        `(setq ,NAME
               (lambda () (when ,FORM
                       (-> ,ICON
                          (concat esh-section-delim ,FORM)
                          (with-face ,@PROPS))))))

      (defun esh-acc (acc x)
        "Accumulator for evaluating and concatenating esh-sections."
        (--if-let (funcall x)
            (if (s-blank? acc)
                it
              (concat acc esh-sep it))
          acc))

      (defun esh-prompt-func ()
        "Build `eshell-prompt-function'"
        (concat esh-header
                (-reduce-from 'esh-acc "" eshell-funcs)
                "\n"
                eshell-prompt-string))

      (esh-section esh-dir
                   "\xf07c"  ;  (faicon folder)
                   (abbreviate-file-name (eshell/pwd))
                   '(:foreground "gold" :bold ultra-bold :underline t))

      (esh-section esh-git
                   "\xe907"  ;  (git icon)
                   (magit-get-current-branch)
                   '(:foreground "pink"))

      (esh-section esh-clock
                   "\xf017"  ;  (clock icon)
                   (format-time-string "%H:%M" (current-time))
                   '(:foreground "forest green"))

      ;; Below I implement a "prompt number" section
      (setq esh-prompt-num 0)
      (add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
      (advice-add 'eshell-send-input :before
                  (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

      (esh-section esh-num
                   "\xf0c9"  ;  (list icon)
                   (number-to-string esh-prompt-num)
                   '(:foreground "brown"))

      ;; Separator between esh-sections
      (setq esh-sep "  ")  ; or " | "

      ;; Separator between an esh-section icon and form
      (setq esh-section-delim " ")

      ;; Eshell prompt header
      (setq esh-header "\n ")  ; or "\n┌─"

      ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
      ;; your login, these can be the same.
      (setq eshell-prompt-regexp " ")   ; or "└─> "
      (setq eshell-prompt-string " ")   ; or "└─> "

      ;; Choose which eshell-funcs to enable
      (setq eshell-funcs (list esh-dir esh-git esh-clock esh-num))

      ;; Enable the new eshell prompt
      (setq eshell-prompt-function 'esh-prompt-func)
   #+end_src

** Rest
   #+begin_src emacs-lisp
     (use-package restclient
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.rest\\'" . restclient-mode)))
   #+end_src

** Tramp

   Tramp defaults

   #+BEGIN_SRC emacs-lisp
     (setq auth-source-debug t)
     (setq tramp-default-user "devel.jmayaalv")
     (setq tramp-default-method "ssh")
     (setq tramp-chunksize 500)
     (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
     (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
  #+END_SRC
** gpg

   Secrets are safe here


   #+BEGIN_SRC emacs-lisp
     (setq auth-sources
           '((:source "~/.emacs.d/secrets/authinfo2.gpg")))
     (setq epg-gpg-program "gpg2")
     (custom-set-variables '(epg-gpg-program  "/usr/local/MacGPG2/bin/gpg2"))
   #+END_SRC



   Handle querying the passphrase through minibuffer.

   #+BEGIN_SRC emacs-lisp
   (setq epa-pinentry-mode 'loopback)
   #+END_SRC
** atlas
   Atlas migrations
   #+BEGIN_SRC emacs-lisp
     (defvar *atlas-home* "/Users/jmaya/Developer/db-support")

     (defun atlas-migration-name (path client branch)
          "New migration with `PATH` name on the given `CLIENT` using the `BRANCH` and current time."
          (format "%s/sql/%s/%s-%s.up.sql" path client (format-time-string "%Y%m%d%H%M%S") branch))

     (defun atlas-migration (client branch)
              "Create a new migration on the given `CLIENT` in the new `BRANCH` and outputs the migration on a new buffer."
              (interactive "sclient? \nsbranch? ")
              (let ((migration-file-path (atlas-migration-name *atlas-home* client branch)))
                (switch-to-buffer (generate-new-buffer migration-file-path))
                (write-file migration-file-path)
                (message (format "new migration: %s on branch: %s" migration-file-path branch))))

   #+END_SRC
